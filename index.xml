<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on uDO</title><link>https://dev.galileocap.me/udo/</link><description>Recent content in Introduction on uDO</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dev.galileocap.me/udo/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick Start</title><link>https://dev.galileocap.me/udo/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.galileocap.me/udo/quick-start/</guid><description> Quick Start # Install # Download binary from the releases.
Create a basic task # In udo.py
FPATH = &amp;#39;/tmp/test.touch&amp;#39; def TaskTouch(): return { &amp;#39;description&amp;#39;: &amp;#39;Creates the file&amp;#39;, &amp;#39;outs&amp;#39;: [FPATH], # This task creates these files &amp;#39;actions&amp;#39;: [ f&amp;#39;echo &amp;#34;Ahoy there!&amp;#34; &amp;gt; {FPATH}&amp;#39;, ], } Execute it # udo Try to execute it again&amp;hellip; # And see that it won&amp;rsquo;t happen because the results were cached
Remove the outputs # udo clean Use the output in other tasks # def TaskMessage(): return { &amp;#39;description&amp;#39;: &amp;#39;Prints the file&amp;#39;, &amp;#39;deps&amp;#39;: [FPATH], # This task depends on these files &amp;#39;capture&amp;#39;: 1, # Show stdout &amp;#39;actions&amp;#39;: [ f&amp;#39;cat {FPATH}&amp;#39;, ], } udo # Will execute them in order: Touch -&amp;gt; Message</description></item><item><title>uDO API</title><link>https://dev.galileocap.me/udo/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dev.galileocap.me/udo/api/</guid><description>API # Execution # Task # class Task: name : str # The name of the task, defaults to the constructor&amp;#39;s name description : str # Will be shown on the &amp;#39;udo help&amp;#39; message deps : list[str | Task] # List of files, directories, or other task # constructors this task depends on outs : list[str] # List of files or directories this task creates capture = -1 | 0 | 1 # Capture stderr and stdout (-1), only stdout (0), # or nothing (1) actions : list[str | callable] # List of bash commands or python functions # to be executed subtasks : list[dict | callable] # List of subtasks Tasks (and subtasks) may be functions that return a dictionary with it&amp;rsquo;s attributes, or the dictionary itself (see examples).</description></item></channel></rss>